helloword
for(i=0;i<ready_fd_num;i++){
            //父进程等待是否有客户端连接，一旦有客户端连接，accept接收，得到new_fd
            //new_fd传递给非忙碌的子进程，把它标记为忙碌
            if(evs[i].data.fd==fd_server)
            {
                bzero(&client_addr,sizeof(client_addr));
                socklen_t addr_len=sizeof(client_addr);
                new_fd=accept(fd_server,(struct sockaddr*)&client_addr,&addr_len);
                non=1;//接过来后把non设1
                bzero(log_buf, 128);
                sprintf(log_buf, "%d connect\n",++conn_num );
                write(fd_open, log_buf, strlen(log_buf));//打日志
                printf("%s %d is connect\n",inet_ntoa(client_addr.sin_addr),ntohs(client_addr.sin_port));
                for(j=0;j<process_num;j++)//找到非忙碌的子进程
                {
                    if(0==parr[j].busy)
                    {
                        send_fd(parr[j].fd,new_fd,0);//发任务给子进程
                        parr[j].busy=1;//对应的子进程被标记为忙碌
                        non=0;//有进程接任务
                        printf("child %d is busy\n",parr[j].pid);
                        break;
                    }
                }
                if(0==non){
                    close(new_fd);//找到空闲子进程，关闭new_fd
                }
                else{
                     pnew=(pNode_t)calloc(1,sizeof(Node_t));
                     pnew->new_fd=new_fd;
                     pthread_mutex_lock(&pque->mutex);//加锁，放队列，解锁
                     que_set(pque,pnew);//任务队列
                     pthread_mutex_unlock(&pque->mutex);
                }
            }
              //如果收到子进程的通知，把对应子进程标记为非忙碌
            for(j=0;j<process_num;j++)
            {
                if(evs[i].data.fd==parr[j].fd)//说明对应的子进程发通知了
                {
                    read(parr[j].fd,&flag,sizeof(flag));//把数据读出来
                    parr[j].busy=0;
                    printf("child %d is not busy\n",parr[j].pid);
                    sleep(2);
                    printf("break");
                    break;
                }
            }
            if(evs[i].data.fd==exit_pipefd[0])//程序收到信号要退出了
            {
                for(j=0;j<process_num;j++)
                {
                    send_fd(parr[j].fd,0,1);//发退出通知给子进程
                }
                for(j=0;j<process_num;j++)
                {
                    wait(NULL);//回收每个子进程,本身是随机等一个
                }
                close(fd_server);
                return 0;
            }
            printf("breakfor");
        }